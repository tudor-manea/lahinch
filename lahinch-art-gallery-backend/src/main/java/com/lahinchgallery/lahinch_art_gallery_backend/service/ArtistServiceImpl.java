package com.lahinchgallery.lahinch_art_gallery_backend.service;

import com.lahinchgallery.lahinch_art_gallery_backend.model.Artist;
import com.lahinchgallery.lahinch_art_gallery_backend.repository.ArtistRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class ArtistServiceImpl implements ArtistService {

    private final ArtistRepository artistRepository;
    private final StorageService storageService;
    private final String supabaseUrl;

    private static final String ARTIST_IMAGES_BUCKET = "artist-images";

    @Autowired
    public ArtistServiceImpl(ArtistRepository artistRepository, StorageService storageService, String supabaseUrl) {
        this.artistRepository = artistRepository;
        this.storageService = storageService;
        this.supabaseUrl = supabaseUrl;
    }

    @Override
    public Page<Artist> getAllArtists(Pageable pageable) {
        return artistRepository.findAll(pageable);
    }

    @Override
    public Optional<Artist> getArtistById(UUID artistId) {
        return artistRepository.findById(artistId);
    }

    @Override
    @Transactional
    public Artist createArtist(Artist artist, MultipartFile profileImageFile) throws IOException {
        // Ensure ID is null for a new entity if it's auto-generated,
        // or set it if it comes from elsewhere (though UUIDs are usually generated by JPA or DB)
        if (artist.getId() == null) {
            artist.setId(UUID.randomUUID()); // Or let JPA/DB handle it if @GeneratedValue is set
        }
        artist.setCreatedAt(OffsetDateTime.now());
        artist.setUpdatedAt(OffsetDateTime.now());

        Artist savedArtist = artistRepository.save(artist); // Save first to get the ID if it's DB generated

        if (profileImageFile != null && !profileImageFile.isEmpty()) {
            String fileName = "profile_" + savedArtist.getId() + "_" + profileImageFile.getOriginalFilename();
            String filePath = savedArtist.getId() + "/" + fileName; // Store in a folder per artist

            storageService.uploadFile(ARTIST_IMAGES_BUCKET, filePath, profileImageFile);
            String fileUrl = storageService.getPublicFileUrl(ARTIST_IMAGES_BUCKET, filePath);
            savedArtist.setProfileImageUrl(fileUrl);
            savedArtist.setUpdatedAt(OffsetDateTime.now()); // Update timestamp after image URL update
            return artistRepository.save(savedArtist);
        }
        return savedArtist;
    }

    @Override
    @Transactional
    public Artist updateArtist(UUID artistId, Artist artistDetails, MultipartFile profileImageFile) throws IOException {
        Artist existingArtist = artistRepository.findById(artistId)
                .orElseThrow(() -> new EntityNotFoundException("Artist not found with ID: " + artistId));

        // Update fields from artistDetails
        existingArtist.setName(artistDetails.getName());
        existingArtist.setSpecialty(artistDetails.getSpecialty());
        existingArtist.setLocation(artistDetails.getLocation());
        existingArtist.setBorn(artistDetails.getBorn());
        existingArtist.setEducation(artistDetails.getEducation());
        existingArtist.setWebsite(artistDetails.getWebsite());
        existingArtist.setBio(artistDetails.getBio());
        existingArtist.setAdditionalBio(artistDetails.getAdditionalBio());
        existingArtist.setFeatured(artistDetails.isFeatured());
        existingArtist.setUpdatedAt(OffsetDateTime.now());

        if (profileImageFile != null && !profileImageFile.isEmpty()) {
            // Optionally, delete old image first if it exists and if paths are not versioned
            if (existingArtist.getProfileImageUrl() != null && !existingArtist.getProfileImageUrl().isEmpty()) {
                try {
                    // Extracting path from URL to delete
                    String existingFilePath = extractFilePathFromUrl(existingArtist.getProfileImageUrl(), ARTIST_IMAGES_BUCKET);
                    if (existingFilePath != null) {
                        storageService.deleteFile(ARTIST_IMAGES_BUCKET, existingFilePath);
                    }
                } catch (Exception e) {
                    // Log error but continue, e.g., old file might not exist or URL format changed
                    System.err.println("Could not delete old profile image: " + e.getMessage());
                }
            }

            String fileName = "profile_" + existingArtist.getId() + "_" + profileImageFile.getOriginalFilename();
            String filePath = existingArtist.getId() + "/" + fileName;

            storageService.uploadFile(ARTIST_IMAGES_BUCKET, filePath, profileImageFile);
            String fileUrl = storageService.getPublicFileUrl(ARTIST_IMAGES_BUCKET, filePath);
            existingArtist.setProfileImageUrl(fileUrl);
        }

        return artistRepository.save(existingArtist);
    }

    @Override
    @Transactional
    public void deleteArtist(UUID artistId) throws IOException {
        Artist artist = artistRepository.findById(artistId)
                .orElseThrow(() -> new EntityNotFoundException("Artist not found with ID: " + artistId));

        if (artist.getProfileImageUrl() != null && !artist.getProfileImageUrl().isEmpty()) {
            try {
                String filePath = extractFilePathFromUrl(artist.getProfileImageUrl(), ARTIST_IMAGES_BUCKET);
                if (filePath != null) {
                    storageService.deleteFile(ARTIST_IMAGES_BUCKET, filePath);
                }
            } catch (Exception e) {
                System.err.println("Could not delete profile image during artist deletion: " + e.getMessage());
                // Decide if this should prevent artist deletion or just be logged
            }
        }
        artistRepository.delete(artist);
    }

    @Override
    public List<Artist> getFeaturedArtists() {
        return artistRepository.findByIsFeaturedTrue();
    }

    // Helper method to extract file path from Supabase public URL
    private String extractFilePathFromUrl(String fileUrl, String bucketName) {
        String prefix = supabaseUrl + "/storage/v1/object/public/" + bucketName + "/";
        if (fileUrl != null && fileUrl.startsWith(prefix)) {
            return fileUrl.substring(prefix.length());
        }
        // Fallback for older or different URL structures if necessary, or if relative path was stored
        // This basic extraction assumes the URL structure matches exactly.
        // More robust parsing might be needed if URL formats vary.
        System.err.println("Could not extract file path from URL: " + fileUrl);
        return null; // Or throw an exception, or handle based on how URLs are stored
    }
}